!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Monit=t():e.Monit=t()}(self,(()=>(()=>{var e={213:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(742),u=n(606),c="IDB_MANAGER_STORE",s="updateTime",l="expireTime";function f(e){var t=e.onlyIndex,n=e.lowerIndex,r=e.upperIndex,o=e.lowerExclusive,a=void 0!==o&&o,i=e.upperExclusive,u=void 0!==i&&i;return void 0!==t?IDBKeyRange.only(t):void 0!==n&&void 0!==r?IDBKeyRange.bound(n,r,a,u):void 0!==n?IDBKeyRange.lowerBound(n,a):IDBKeyRange.upperBound(r,u)}function h(e){var t,n=Date.now();return r(r({},e.item),((t={}).updateTime=n,t.expireTime=void 0!==e.itemDuration?e.itemDuration+n:-1,t))}function p(e){return e?e.expireTime>0&&e.expireTime<Date.now()?null:(delete e.updateTime,delete e.expireTime,e):null}function d(e){return o(this,void 0,void 0,(function(){var t,n,r,o,i;return a(this,(function(a){switch(a.label){case 0:return[4,y()];case 1:return[4,g(t=a.sent(),c,e.name)];case 2:return!(n=a.sent())||e.version>n.version?(r=t.transaction(c,"readwrite"),o=r.objectStore(c),i={dbName:e.name,tableList:e.tableList,version:e.version},o.put(h({item:i,tableName:c})),[4,r.complete]):[3,4];case 3:a.sent(),t.close(),a.label=4;case 4:return[2]}}))}))}function m(e){return o(this,void 0,void 0,(function(){var t,n;return a(this,(function(r){switch(r.label){case 0:return[4,y()];case 1:return t=r.sent(),(n=t.transaction(c,"readwrite")).objectStore(c).delete(e),[4,n.complete];case 2:return r.sent(),t.close(),[2]}}))}))}function b(e){return o(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,d(e)];case 1:return t.sent(),[4,u.open(e.name,e.version,(function(t){E(t,e.tableList)}))];case 2:return[2,t.sent()]}}))}))}function y(){return o(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,u.open("IDB_MANAGER_DB",1,(function(e){!function(e){e.createObjectStore(c,{keyPath:"dbName"})}(e)}))];case 1:return[2,e.sent()]}}))}))}function v(e){return o(this,void 0,void 0,(function(){var t,n;return a(this,(function(r){switch(r.label){case 0:return[4,y()];case 1:return[4,g(t=r.sent(),c,e)];case 2:return n=r.sent(),t.close(),n?[4,u.open(n.dbName,n.version,(function(e){E(e,n.tableList||[])}))]:[3,4];case 3:return[2,r.sent()];case 4:return[2,null]}}))}))}function g(e,t,n){return o(this,void 0,void 0,(function(){var r;return a(this,(function(o){switch(o.label){case 0:if(!e.objectStoreNames.contains(t))return[3,8];r=e.transaction(t,"readonly"),o.label=1;case 1:return o.trys.push([1,,3,7]),[4,r.objectStore(t).get(n)];case 2:return[2,p(o.sent())];case 3:return o.trys.push([3,5,,6]),[4,r.complete];case 4:case 5:return o.sent(),[3,6];case 6:return[7];case 7:return[3,9];case 8:return[2,null];case 9:return[2]}}))}))}function E(e,t){try{t.forEach((function(t){if(e.objectStoreNames.contains(t.tableName)){var n=e.transaction(t.tableName).objectStore(t.tableName);(t.indexList||[]).forEach((function(e){n.indexNames.contains(e.indexName)||n.createIndex(e.indexName,e.indexName,{unique:e.unique})}))}else{var o=t.primaryKey||"id",a=e.createObjectStore(t.tableName,r({keyPath:o},"id"===o?{autoIncrement:!0}:{}));a.createIndex(o,o,{unique:!0}),(t.indexList||[]).forEach((function(e){a.createIndex(e.indexName,e.indexName,{unique:e.unique})})),a.createIndex(s,s,{unique:!1}),a.createIndex(l,l,{unique:!1})}}))}catch(t){e.close()}}function R(e,t,n){return o(this,void 0,void 0,(function(){var r;return a(this,(function(o){switch(o.label){case 0:return o.trys.push([0,3,8,9]),[4,n()];case 1:return o.sent(),[4,e.complete];case 2:return o.sent(),[3,9];case 3:r=o.sent();try{e.abort()}catch(e){}o.label=4;case 4:return o.trys.push([4,6,,7]),[4,e.complete];case 5:case 6:return o.sent(),[3,7];case 7:throw r;case 8:return t.close(),[7];case 9:return[2]}}))}))}function w(e,t){return o(this,void 0,void 0,(function(){var n,r,u,c=this;return a(this,(function(s){switch(s.label){case 0:return n=t.filter((function(t){return e.objectStoreNames.contains(t.tableName)})),r=i.deduplicateList(n.map((function(e){return e.tableName}))),[4,R(u=e.transaction(r,"readwrite"),e,(function(){return o(c,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,Promise.all(n.map((function(e){var t=e.tableName,n=e.indexRange,r=u.objectStore(t);return n?new Promise((function(e){r.index(n.indexName).iterateCursor(f(n),(function(t){t?(r.delete(t.primaryKey),t.continue()):e()}))})):r.clear()})))];case 1:return e.sent(),[2]}}))}))}))];case 1:return s.sent(),[2]}}))}))}function N(e,t){return o(this,void 0,void 0,(function(){var n,r,u,c=this;return a(this,(function(s){switch(s.label){case 0:return n=i.deduplicateList(t.map((function(e){return e.tableName}))),[4,_(e.name,n.map((function(e){return{tableName:e,indexRange:{indexName:l,upperIndex:+new Date,upperExclusive:!1}}})))];case 1:return s.sent(),[4,b(e)];case 2:return r=s.sent(),[4,R(u=r.transaction(n,"readwrite"),r,(function(){return o(c,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,Promise.all(t.map((function(e){return u.objectStore(e.tableName).put(h(e))})))];case 1:return e.sent(),[2]}}))}))}))];case 3:return s.sent(),[2]}}))}))}function x(e,t,n){return o(this,void 0,void 0,(function(){var r;return a(this,(function(o){switch(o.label){case 0:return[4,v(e)];case 1:if(!(r=o.sent()))return[3,7];o.label=2;case 2:return o.trys.push([2,4,5,6]),[4,g(r,t,n)];case 3:return[2,o.sent()];case 4:throw o.sent();case 5:return r.close(),[7];case 6:return[3,8];case 7:return[2,null];case 8:return[2]}}))}))}function O(e,t){return o(this,void 0,void 0,(function(){var n,r,o,i,u,c,s;return a(this,(function(a){switch(a.label){case 0:return n=t.tableName,r=t.indexRange,[4,v(e)];case 1:if(!(o=a.sent()))return[3,17];a.label=2;case 2:return a.trys.push([2,14,15,16]),i=[],o.objectStoreNames.contains(n)?[3,3]:[3,13];case 3:u=o.transaction(n,"readonly"),a.label=4;case 4:return a.trys.push([4,,9,13]),c=u.objectStore(n),r?[3,6]:[4,c.getAll()];case 5:return s=a.sent(),i=(s||[]).map(p).filter((function(e){return null!==e})),[3,8];case 6:return[4,new Promise((function(e){c.index(r.indexName).iterateCursor(f(r),(function(t){if(t){var n=p(t.value);n&&i.push(n),t.continue()}else e()}))}))];case 7:a.sent(),a.label=8;case 8:return[3,13];case 9:return a.trys.push([9,11,,12]),[4,u.complete];case 10:case 11:return a.sent(),[3,12];case 12:return[7];case 13:return[2,i];case 14:throw a.sent();case 15:return o.close(),[7];case 16:return[3,18];case 17:return[2,[]];case 18:return[2]}}))}))}function I(e){return o(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,m(e)];case 1:return t.sent(),[4,u.delete(e)];case 2:return t.sent(),[2]}}))}))}function _(e,t){return o(this,void 0,void 0,(function(){var n;return a(this,(function(r){switch(r.label){case 0:return[4,v(e)];case 1:return(n=r.sent())?[4,w(n,t)]:[3,3];case 2:return r.sent(),[3,4];case 3:case 4:return[2]}}))}))}t.addItems=N,t.getItem=x,t.getItemsInRange=O,t.deleteDB=I,t.deleteItems=_,t.default={addItems:N,getItem:x,getItemsInRange:O,deleteDB:I,deleteItems:_}},880:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(266),u=n(213),c=n(742),s=!0;function l(e){if(c.paramChecker(e,c.ParamCheckerEnum.NotNullObject,"tableIndexRange",!1),c.paramChecker(e.tableName,c.ParamCheckerEnum.String,"tableIndexRange's",!1),c.paramChecker(e.indexRange,c.ParamCheckerEnum.NotNullObject,"tableIndexRange's indexRange",s),e.indexRange){var t=e.indexRange,n=t.indexName,r=t.onlyIndex,o=t.lowerIndex,a=t.upperIndex,i=t.lowerExclusive,u=t.upperExclusive;if(c.paramChecker(n,c.ParamCheckerEnum.String,"indexRange's indexName",!1),void 0===r&&void 0===o&&void 0===a)throw new Error("indexRange should have bounds or value for the index");if(void 0!==o&&void 0!==a&&o>=a)throw new Error("lowerIndex should be less than upperIndex");o&&a&&c.paramChecker(i,c.ParamCheckerEnum.Boolean,"indexRange's lowerExclusive",s),c.paramChecker(u,c.ParamCheckerEnum.Boolean,"indexRange's upperExclusive",s)}}function f(){try{return i.default(),!0}catch(e){return!1}}t.idbIsSupported=f;var h=function(){function e(e){i.default(),function(e){c.paramChecker(e,c.ParamCheckerEnum.NotNullObject,"dbConfig",!1),c.paramChecker(e.dbName,c.ParamCheckerEnum.String,"dbName",!1),c.paramChecker(e.dbVersion,c.ParamCheckerEnum.NonNegativeInteger,"dbVersion",s),c.paramChecker(e.itemDuration,c.ParamCheckerEnum.NonNegativeInteger,"itemDuration of dbConfig",s),c.paramChecker(e.tables,c.ParamCheckerEnum.NotNullObject,"tables",s),Object.keys(e.tables||{}).forEach((function(t){var n=e.tables[t];c.paramChecker(n.primaryKey,c.ParamCheckerEnum.String,"primaryKey",s),c.paramChecker(n.itemDuration,c.ParamCheckerEnum.NonNegativeInteger,"itemDuration of table",s),c.paramChecker(n.indexList,c.ParamCheckerEnum.Array,"indexList",s),(n.indexList||[]).forEach((function(e){c.paramChecker(e.indexName,c.ParamCheckerEnum.String,"indexName",!1),c.paramChecker(e.unique,c.ParamCheckerEnum.Boolean,"unique",s)}))}))}(e),this.name=e.dbName,this.version=c.optionWithBackup(e.dbVersion,1),this.tableList=Object.keys(e.tables||{}).map((function(t){return r({tableName:t},e.tables[t])})),this.itemDuration=e.itemDuration}return e.prototype.addItems=function(e){return o(this,void 0,void 0,(function(){var t,n,o=this;return a(this,(function(a){switch(a.label){case 0:return t=function(e,t,n){return void 0!==n?n:void 0!==t?t:e},i=e,l=this.tableList,c.paramChecker(i,c.ParamCheckerEnum.Array,"items",!1),i.forEach((function(e){c.paramChecker(e.tableName,c.ParamCheckerEnum.String,"item's tableName",!1),c.paramChecker(e.itemDuration,c.ParamCheckerEnum.NonNegativeInteger,"item's itemDuration",s);var t=l.filter((function(t){return t.tableName===e.tableName}))[0];if(!t)throw new Error("Table "+e.tableName+" does not exist");if(void 0!==t.primaryKey&&Object.getOwnPropertyNames(e.item).indexOf(t.primaryKey)<0)throw new Error("primaryKey is needed for item in table "+e.tableName)})),n=e.map((function(e){var n=o.tableList.filter((function(t){return t.tableName===e.tableName}))[0];return r({itemDuration:t(o.itemDuration,n.itemDuration,e.itemDuration)},e)})),[4,u.default.addItems({name:this.name,tableList:this.tableList,version:this.version},n)];case 1:return a.sent(),[2]}var i,l}))}))},e.prototype.getItem=function(e,t){return o(this,void 0,void 0,(function(){return a(this,(function(n){switch(n.label){case 0:return[4,d(this.name,e,t)];case 1:return[2,n.sent()]}}))}))},e.prototype.getItemsInRange=function(e){return o(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,m(this.name,e)];case 1:return[2,t.sent()]}}))}))},e.prototype.deleteItemsInRange=function(e){return o(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return c.paramChecker(e,c.ParamCheckerEnum.Array,"tableIndexRanges",!1),e.forEach((function(e){l(e)})),[4,u.default.deleteItems(this.name,e)];case 1:return t.sent(),[2]}}))}))},e}();function p(e){return o(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return i.default(),c.paramChecker(e,c.ParamCheckerEnum.String,"dbName",!1),[4,u.default.deleteDB(e)];case 1:return t.sent(),[2]}}))}))}function d(e,t,n){return o(this,void 0,void 0,(function(){return a(this,(function(r){switch(r.label){case 0:return c.paramChecker(e,c.ParamCheckerEnum.String,"dbName",!1),c.paramChecker(t,c.ParamCheckerEnum.String,"tableName",!1),[4,u.default.getItem(e,t,n)];case 1:return[2,r.sent()]}}))}))}function m(e,t){return o(this,void 0,void 0,(function(){return a(this,(function(n){switch(n.label){case 0:return c.paramChecker(e,c.ParamCheckerEnum.String,"dbName",!1),l(t),[4,u.default.getItemsInRange(e,t)];case 1:return[2,n.sent()]}}))}))}t.CustomDB=h,t.deleteDB=p,t.getItemFromDB=d,t.getItemsInRangeFromDB=m,t.default={idbIsSupported:f,CustomDB:h,deleteDB:p,getItemFromDB:d,getItemsInRangeFromDB:m}},266:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){if(!window)throw new Error("idb-managed can not run in non-browser environment");for(var e=0,t=["indexedDB","IDBDatabase","IDBObjectStore","IDBTransaction","IDBIndex","IDBCursor","IDBKeyRange","IDBRequest"];e<t.length;e++){var n=t[e];if(!window.hasOwnProperty(n)||!window[n])throw new Error(n+" is not supported in window")}}},606:e=>{function t(e){return Array.prototype.slice.call(e)}function n(e){return new Promise((function(t,n){e.onsuccess=function(){t(e.result)},e.onerror=function(){n(e.error)}}))}function r(e,t,r){var o,a=new Promise((function(a,i){n(o=e[t].apply(e,r)).then(a,i)}));return a.request=o,a}function o(e,t,n){var o=r(e,t,n);return o.then((function(e){if(e)return new l(e,o.request)}))}function a(e,t,n){n.forEach((function(n){Object.defineProperty(e.prototype,n,{get:function(){return this[t][n]},set:function(e){this[t][n]=e}})}))}function i(e,t,n,o){o.forEach((function(o){o in n.prototype&&(e.prototype[o]=function(){return r(this[t],o,arguments)})}))}function u(e,t,n,r){r.forEach((function(r){r in n.prototype&&(e.prototype[r]=function(){return this[t][r].apply(this[t],arguments)})}))}function c(e,t,n,r){r.forEach((function(r){r in n.prototype&&(e.prototype[r]=function(){return o(this[t],r,arguments)})}))}function s(e){this._index=e}function l(e,t){this._cursor=e,this._request=t}function f(e){this._store=e}function h(e){this._tx=e,this.complete=new Promise((function(t,n){e.oncomplete=function(){t()},e.onerror=function(){n(e.error)},e.onabort=function(){n(e.error)}}))}function p(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new h(n)}function d(e){this._db=e}var m;if(f.prototype.createIndex=function(){return new s(this._store.createIndex.apply(this._store,arguments))},f.prototype.index=function(){return new s(this._store.index.apply(this._store,arguments))},h.prototype.objectStore=function(){return new f(this._tx.objectStore.apply(this._tx,arguments))},p.prototype.createObjectStore=function(){return new f(this._db.createObjectStore.apply(this._db,arguments))},d.prototype.transaction=function(){return new h(this._db.transaction.apply(this._db,arguments))},function(){try{return["IDBIndex","IDBCursor","IDBObjectStore","IDBTransaction","IDBDatabase"].forEach((function(e){if(window&&(!window[e]||!window.hasOwnProperty(e)))throw new Error(e)})),!0}catch(e){return!1}}())a(s,"_index",["name","keyPath","multiEntry","unique"]),i(s,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),c(s,"_index",IDBIndex,["openCursor","openKeyCursor"]),a(l,"_cursor",["direction","key","primaryKey","value"]),i(l,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach((function(e){e in IDBCursor.prototype&&(l.prototype[e]=function(){var t=this,r=arguments;return Promise.resolve().then((function(){return t._cursor[e].apply(t._cursor,r),n(t._request).then((function(e){if(e)return new l(e,t._request)}))}))})})),a(f,"_store",["name","keyPath","indexNames","autoIncrement"]),i(f,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),c(f,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),u(f,"_store",IDBObjectStore,["deleteIndex"]),a(h,"_tx",["objectStoreNames","mode"]),u(h,"_tx",IDBTransaction,["abort"]),a(p,"_db",["name","version","objectStoreNames"]),u(p,"_db",IDBDatabase,["deleteObjectStore","close"]),a(d,"_db",["name","version","objectStoreNames"]),u(d,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach((function(e){[f,s].forEach((function(n){e in n.prototype&&(n.prototype[e.replace("open","iterate")]=function(){var n=t(arguments),r=n[n.length-1],o=this._store||this._index,a=o[e].apply(o,n.slice(0,-1));a.onsuccess=function(){r(a.result)}})}))})),[s,f].forEach((function(e){e.prototype.getAll||(e.prototype.getAll=function(e,t){var n=this,r=[];return new Promise((function(o){n.iterateCursor(e,(function(e){e?(r.push(e.value),void 0===t||r.length!=t?e.continue():o(r)):o(r)}))}))})})),m={open:function(e,t,n){var o=r(indexedDB,"open",[e,t]),a=o.request;return a&&(a.onupgradeneeded=function(e){if(n){var t=new p(a.result,e.oldVersion,a.transaction);t.transaction.complete.catch((function(){})),n(t)}}),o.then((function(e){return new d(e)}))},delete:function(e){return r(indexedDB,"deleteDatabase",[e])}};else{var b="indexedDB is not supported";m={open:function(){return Promise.reject(new Error(b))},delete:function(){return Promise.reject(new Error(b))}}}e.exports=m},742:(e,t)=>{"use strict";function n(e){return!isNaN(e)&&e>=0}Object.defineProperty(t,"__esModule",{value:!0}),t.ParamCheckerEnum={NonNegativeInteger:{rule:n,desc:"needs to be a non-negative integer"},NotNullObject:{rule:function(e){return e&&"object"==typeof e},desc:"needs to be a not-null object"},String:{rule:function(e){return"string"==typeof e},desc:"needs to be a string"},Array:{rule:function(e){return e instanceof Array},desc:"needs to be an Array"},Boolean:{rule:function(e){return"boolean"==typeof e},desc:"needs to be a boolean"}},t.isNonNegativeInteger=n,t.optionWithBackup=function(e,t){return void 0!==e?e:t},t.paramChecker=function(e,t,n,r){var o=n+" "+t.desc;if(r){if(void 0!==e&&!t.rule(e))throw new Error(o+" if defined")}else if(!t.rule(e))throw new Error(o)},t.deduplicateList=function(e){return e.reduce((function(e,t){return e.indexOf(t)<0?e.concat(t):e}),[])}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r].call(a.exports,a,a.exports,n),a.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return(()=>{"use strict";n.r(r),n.d(r,{init:()=>be});var e=Object.prototype.toString;function t(t){return function(n){return e.call(n)==="[object ".concat(t,"]")}}var o={isNumber:t("Number"),isString:t("String"),isBoolean:t("Boolean"),isNull:t("Null"),isUndefined:t("Undefined"),isSymbol:t("Symbol"),isFunction:t("Function"),isObject:t("Object"),isArray:t("Array"),isWindow:t("Window")};function a(t){switch(e.call(t)){case"[object Error]":case"[object Exception]":case"[object DOMException]":return!0;default:return function(e,t){try{return e instanceof t}catch(e){return!1}}(t,Error)}}var i=o.isWindow("undefined"!=typeof window?window:0),u=function(){if(i)return window}(),c={};function s(){return"undefined"==typeof document||null==document.location?"":document.location.href}function l(e,t,n,r){void 0===r&&(r=!1),e.addEventListener(t,n,r)}function f(e,t,n,r){if(void 0===r&&(r=!1),void 0!==e&&(t in e||r)){var o=n(e[t]);"function"==typeof o&&(e[t]=o)}}function h(e,t,n){return!!function(e,t){return typeof e===t}(e,n)||(void 0!==e&&console.log("".concat(t,"期望传入").concat(n,"类型，目前是").concat(typeof e,"类型")),!1)}var p,d;function m(e,t){return o.isString(e)?e.slice(0,t)+(e.length>t?":截取前".concat(t,"个字符"):""):""}(d=p||(p={})).Else="else",d.Error="error",d.Warning="warning",d.Info="info",d.Debug="debug",d.Low="low",d.Normal="normal",d.High="high",d.Critical="critical",function(e){e.fromString=function(t){switch(t){case"debug":return e.Debug;case"info":case"log":case"assert":return e.Info;case"warn":case"warning":return e.Warning;case e.Low:case e.Normal:case e.High:case e.Critical:case"error":return e.Error;default:return e.Else}}}(p||(p={}));var b,y=function(){function e(){this.stack=[],this.isFlushing=!1,"Promise"in u&&(this.micro=Promise.resolve())}return e.prototype.addFn=function(e){var t=this;"function"==typeof e&&("Promise"in u?(this.stack.push(e),this.isFlushing||(this.isFlushing=!0,this.micro.then((function(){t.flushStack()})))):e())},e.prototype.clear=function(){this.stack=[]},e.prototype.getStack=function(){return this.stack},e.prototype.flushStack=function(){var e=this.stack.slice(0);this.stack.length=0,this.isFlushing=!1;for(var t=0;t<e.length;t++)(0,e[t])()},e}();!function(e){e.Ok="ok",e.DeadlineExceeded="deadline_exceeded",e.Unauthenticated="unauthenticated",e.PermissionDenied="permission_denied",e.NotFound="not_found",e.ResourceExhausted="resource_exhausted",e.InvalidArgument="invalid_argument",e.Unimplemented="unimplemented",e.Unavailable="unavailable",e.InternalError="internal_error",e.UnknownError="unknown_error",e.Cancelled="cancelled",e.AlreadyExists="already_exists",e.FailedPrecondition="failed_precondition",e.Aborted="aborted",e.OutOfRange="out_of_range",e.DataLoss="data_loss"}(b||(b={}));var v,g,E,R,w,N,x,O=function(){return O=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},O.apply(this,arguments)};!function(e){e.UNKNOWN="UNKNOWN",e.UNKNOWN_FUNCTION="UNKNOWN_FUNCTION",e.JAVASCRIPT_ERROR="JAVASCRIPT_ERROR",e.LOG_ERROR="LOG_ERROR",e.FETCH_ERROR="FETCH_ERROR",e.RESOURCE_ERROR="RESOURCE_ERROR",e.PROMISE_ERROR="PROMISE_ERROR",e.ROUTE_ERROR="ROUTE_ERROR"}(v||(v={})),O({},v),(x=g||(g={})).ROUTE="Route",x.CLICK="UI.Click",x.CONSOLE="Console",x.XHR="Xhr",x.FETCH="Fetch",x.UNHANDLEDERJECTION="Unhandledrejection",x.RESOURCE="Resource",x.CODE_ERROR="Code Error",x.CUSTOMER="Customer",function(e){e.HTTP="http",e.USER="user",e.DEBUG="debug",e.EXCEPTION="exception",e.LIFECYCLE="lifecycle"}(E||(E={})),function(e){e.XHR="xhr",e.FETCH="fetch",e.CONSOLE="console",e.DOM="dom",e.HISTORY="history",e.ERROR="error",e.HASHCHANGE="hashchange",e.UNHANDLEDERJECTION="unhandledrejection"}(R||(R={})),function(e){e.XHR="xhr",e.FETCH="fetch"}(w||(w={})),function(e){e[e.BAD_REQUEST=400]="BAD_REQUEST",e[e.UNAUTHORIZED=401]="UNAUTHORIZED",e[e.INTERNAL_EXCEPTION=500]="INTERNAL_EXCEPTION"}(N||(N={}));var I,_=/^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/,D=function(){return D=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},D.apply(this,arguments)};function C(e,t){var n={time:Date.now(),url:s(),name:e.name,level:t,message:e.message};if(void 0===e.stack||!e.stack)return n;for(var r,o,a,i=/^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|[a-z]:|\/).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i,u=/^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\[native).*?|[^@]*bundle)(?::(\d+))?(?::(\d+))?\s*$/i,c=/^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i,l=/(\S+) line (\d+)(?: > eval line \d+)* > eval/i,f=/\((\S*)(?::(\d+))(?::(\d+))\)/,h=e.stack.split("\n"),p=[],d=0,m=h.length;d<m;++d){if(o=i.exec(h[d])){var b=o[2]&&0===o[2].indexOf("native");o[2]&&0===o[2].indexOf("eval")&&(r=f.exec(o[2]))&&(o[2]=r[1],o[3]=r[2],o[4]=r[3]),a={url:b?null:o[2],func:o[1]||v.UNKNOWN_FUNCTION,args:b?[o[2]]:[],line:o[3]?+o[3]:null,column:o[4]?+o[4]:null}}else if(o=c.exec(h[d]))a={url:o[2],func:o[1]||v.UNKNOWN_FUNCTION,args:[],line:+o[3],column:o[4]?+o[4]:null};else{if(!(o=u.exec(h[d])))continue;o[3]&&o[3].indexOf(" > eval")>-1&&(r=l.exec(o[3]))?(o[3]=r[1],o[4]=r[2],o[5]=null):0!==d||o[5]||void 0===e.columnNumber||(p[0].column=e.columnNumber+1),a={url:o[3],func:o[1]||v.UNKNOWN_FUNCTION,args:o[2]?o[2].split(","):[],line:o[4]?+o[4]:null,column:o[5]?+o[5]:null}}!a.func&&a.line&&(a.func=v.UNKNOWN_FUNCTION),p.push(a)}return p.length?D(D({},n),{stack:p}):null}function S(e){if(!e)return{};var t=e.match(/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);if(!t)return{};var n=t[6]||"",r=t[8]||"";return{host:t[4],path:t[5],protocol:t[2],relative:t[5]+n+r}}function T(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate()).getTime()}!function(e){e.DB_NOT_SUPPORT="IndexedDB is not supported",e.NO_LOG="No log exists",e.REPORT_LOG_SUCC="Report succ",e.REPORT_LOG_FAIL="Report fail",e.EXCEED_TRY_TIMES="Exceed try times",e.EXCEED_LOG_SIZE_LIMIT="Exceed log size day limit"}(I||(I={}));var k=function(){function e(){this.maxBreadcrumbs=10,this.beforePushBreadcrumb=null,this.stack=[]}return e.prototype.push=function(e){if("function"!=typeof this.beforePushBreadcrumb)this.immediatePush(e);else{var t;if(!(t=(0,this.beforePushBreadcrumb)(this,e)))return;this.immediatePush(t)}},e.prototype.immediatePush=function(e){e.time||(e.time=Date.now()),this.stack.length>=this.maxBreadcrumbs&&this.shift(),this.stack.push(e),this.stack.sort((function(e,t){return e.time-t.time}))},e.prototype.shift=function(){return void 0!==this.stack.shift()},e.prototype.clear=function(){this.stack=[]},e.prototype.getStack=function(){return this.stack},e.prototype.getCategory=function(e){switch(e){case g.XHR:case g.FETCH:return E.HTTP;case g.CLICK:case g.ROUTE:return E.USER;case g.CUSTOMER:case g.CONSOLE:return E.DEBUG;case g.UNHANDLEDERJECTION:case g.CODE_ERROR:default:return E.EXCEPTION}},e.prototype.bindOptions=function(e){void 0===e&&(e={});var t=e.maxBreadcrumbs,n=e.beforePushBreadcrumb;h(t,"maxBreadcrumbs","number")&&(this.maxBreadcrumbs=t),h(n,"beforePushBreadcrumb","function")&&(this.beforePushBreadcrumb=n)},e}(),P=new k,U=n(880),j=[],B=!1;function A(){return e=this,t=void 0,r=function(){var e,t,n;return function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}}(this,(function(r){switch(r.label){case 0:if(!(j.length>0)||B)return[3,5];e=j.shift(),B=!0,r.label=1;case 1:return r.trys.push([1,3,,4]),[4,e.asyncF()];case 2:return t=r.sent(),e.resolution(t),[3,4];case 3:return n=r.sent(),e.rejection(n),[3,4];case 4:return B=!1,A(),[3,0];case 5:return[2]}}))},new((n=void 0)||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}));var e,t,n,r}var L,H,F,K=function(){return K=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},K.apply(this,arguments)},q=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}))},X=function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},M="__monitor_detail_table__",G="__logReportName__",W="__log_day_table__",J="__logDay__",z=6048e5,V=function(){function e(e){var t;this.DB=new U.CustomDB({dbName:e||"__monitor_web_db__",dbVersion:1,tables:(t={},t[M]={indexList:[{indexName:G,unique:!1},{indexName:"__logCreateTime__",unique:!1}]},t.__log_day_table__={primaryKey:J},t)})}return e.prototype.logReportNameFormatter=function(e,t){return"".concat(e,"_").concat(t)},e.prototype.logReportNameParse=function(e){var t=e.split("_");return{logDay:t[0],pageIndex:t[1]}},e.prototype.getLogDayInfo=function(e){return q(this,void 0,void 0,(function(){return X(this,(function(t){switch(t.label){case 0:return[4,this.DB.getItem(W,e)];case 1:return[2,t.sent()]}}))}))},e.prototype.getLogDaysInfo=function(e,t){return q(this,void 0,void 0,(function(){var n;return X(this,(function(r){switch(r.label){case 0:return e!==t?[3,2]:[4,this.DB.getItem(W,e)];case 1:return[2,(n=r.sent())?[n]:[]];case 2:return[4,this.DB.getItemsInRange({tableName:W,indexRange:{indexName:J,lowerIndex:e,upperIndex:t,lowerExclusive:!1,upperExclusive:!1}})];case 3:return[2,r.sent()]}}))}))},e.prototype.getLogsByReportName=function(e){return q(this,void 0,void 0,(function(){return X(this,(function(t){switch(t.label){case 0:return[4,this.DB.getItemsInRange({tableName:W,indexRange:{indexName:G,onlyIndex:e}})];case 1:return[2,t.sent()]}}))}))},e.prototype.addLog=function(e){return q(this,void 0,void 0,(function(){var t,n,r,o,a,i,u,c,s,l,f,h,p,d,m;return X(this,(function(b){switch(b.label){case 0:return t=function(e){for(var t=0,n=0,r=e.length;n<r;n++){var o=e.charCodeAt(n);t+=o<=127?1:o<=2047?2:o<=65535?3:4}return t}(e),g=(v=n=new Date).getFullYear(),E=v.getMonth()+1,R=v.getDate(),r="".concat(g,"-").concat(E<10?"0"+E:E,"-").concat(R<10?"0"+R:R),[4,this.getLogDayInfo(r)];case 1:return(o=b.sent()||((p={}).__logDay__=r,p.totalSize=0,p.reportPagesInfo={pageSizes:[0]},p)).totalSize+t>7340032?(console.log(I.EXCEED_LOG_SIZE_LIMIT),[2]):(o.reportPagesInfo&&o.reportPagesInfo.pageSizes||(o.reportPagesInfo={pageSizes:[0]}),a=o.reportPagesInfo.pageSizes,i=a.length-1,u=a[i],c=u>0&&u+t>1048576,y=a.slice(),c?y.push(t):y[i]+=t,s=y,(d={}).__logReportName__=this.logReportNameFormatter(r,c?i+1:i),d.__logCreateTime__=+n,d.logSize=t,d.logString=e,l=d,(m={}).__logDay__=r,m.totalSize=o.totalSize+t,m.reportPagesInfo={pageSizes:s},f=m,h=z-(+new Date-T(new Date)),[4,this.DB.addItems([{tableName:W,item:f,itemDuration:h},{tableName:M,item:l,itemDuration:h}])]);case 2:return b.sent(),[2]}var y,v,g,E,R}))}))},e.prototype.incrementalDelete=function(e,t){return q(this,void 0,void 0,(function(){var n,r,o,a,i,u,c,s,l,f,h;return X(this,(function(p){switch(p.label){case 0:return[4,this.getLogDayInfo(e)];case 1:return(n=p.sent())&&n.reportPagesInfo&&n.reportPagesInfo.pageSizes instanceof Array?(r=n.reportPagesInfo.pageSizes,o=n.totalSize,a=r.reduce((function(e,n,r){return t.indexOf(r)>=0?e+n:e}),0),i=t.indexOf(r.length-1)>=0?r.concat([0]):r,u=i.reduce((function(e,n,r){return t.indexOf(r)>=0?e.concat([0]):e.concat([n])}),[]),c=K(K({},n),{reportPagesInfo:{pageSizes:u},totalSize:Math.max(o-a,0)}),s=z-(+new Date-T(new Date))-(T(new Date)-function(e){var t=(e.match(/(\d+)/g)||[]).map((function(e){return parseInt(e)})),n=t[0],r=t[1],o=t[2];if(n<1e3)throw new Error("Invalid dayString: ".concat(e));return new Date(n,r-1,o)}(e).getTime()),[4,this.DB.addItems([{tableName:W,item:c,itemDuration:s}])]):[3,6];case 2:p.sent(),l=0,f=t,p.label=3;case 3:return l<f.length?(h=f[l],[4,this.DB.deleteItemsInRange([{tableName:M,indexRange:{indexName:G,onlyIndex:this.logReportNameFormatter(e,h)}}])]):[3,6];case 4:p.sent(),p.label=5;case 5:return l++,[3,3];case 6:return[2]}}))}))},e.idbIsSupported=U.idbIsSupported,e.deleteDB=U.deleteDB,e}();function Y(e){return void 0===e.actionType&&!e.isTrackData}!function(e){e.Get="GET",e.Post="POST",e.Put="PUT",e.Delete="DELETE"}(H||(H={})),function(e){e.PAGE="PAGE",e.EVENT="EVENT",e.VIEW="VIEW",e.DURATION="DURATION",e.DURATION_VIEW="DURATION_VIEW",e.OTHER="OTHER"}(F||(F={}));var $={};function Z(e){return e.replace(/[\?#].*$/,"").replace(/\/\d+([\/]*$)/,"{param}$1")}function Q(e){var t=function(e){return Object.keys(e).sort().reduce((function(n,r){return o.isObject(e[r])?n[r]=t(e[r]):n[r]=e[r],n}),{})};try{if(/\{.*\}/.test(e)){var n=JSON.parse(e);return n=t(n),JSON.stringify(n)}}catch(t){return e}}var ee=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}))},te=function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},ne=function(){function e(){this.beforeDataReport=null,this.configReportXhr=null,this.useImgUpload=!1,this.errorDsn="",this.apiKey="",this.queue=new y}return e.prototype.imgRequest=function(e,t){this.queue.addFn((function(){var n=new Image,r=-1===t.indexOf("?")?"?":"&";n.src="".concat(t).concat(r,"data=").concat(encodeURIComponent(JSON.stringify(e))),n=null}))},e.prototype.beforePost=function(e){return ee(this,void 0,void 0,(function(){var t,n;return te(this,(function(r){switch(r.label){case 0:if(Y(e)){if(!(t=function(e,t){var n;switch(e.type){case v.FETCH_ERROR:n=e.type+e.request.method+e.response.data+Z(e.request.url)+t;break;case v.JAVASCRIPT_ERROR:n=e.type+e.name+e.message+t;break;case v.LOG_ERROR:n=e.customTag+e.type+e.name+t;break;case v.PROMISE_ERROR:n=function(e,t){var n=Z(e.url);return e.name===R.UNHANDLEDERJECTION?e.type+Q(e.message)+t:e.type+e.name+Q(e.message)+n}(e,t);break;default:n=e.type+e.message+t}return n=function(e){var t=0;if(0===e.length)return t;for(var n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t&=t;return t}(n),$[n]>=ae.maxDuplicateCount?null:("number"==typeof $[n]?$[n]++:$[n]=1,n)}(e,this.apiKey)))return[2,!1];e.errorId=t}return n=this.getTransportData(e),"function"!=typeof this.beforeDataReport?[3,2]:[4,this.beforeDataReport(n)];case 1:if(!(n=r.sent()))return[2,!1];r.label=2;case 2:return[2,n]}}))}))},e.prototype.getTransportData=function(e){return{breadcrumb:P.getStack(),data:e}},e.prototype.xhrPost=function(e,t){return ee(this,void 0,void 0,(function(){var n,r=this;return te(this,(function(o){return n=function(){var n=new XMLHttpRequest;n.open(H.Post,t),n.setRequestHeader("Content-Type","application/json;charset=UTF-8"),n.withCredentials=!0,"function"==typeof r.configReportXhr&&r.configReportXhr(n,e),n.send(JSON.stringify(e))},this.queue.addFn(n),[2]}))}))},e.prototype.isSdkTransportUrl=function(e){var t=!1;return this.errorDsn&&-1!==e.indexOf(this.errorDsn)&&(t=!0),t},e.prototype.bindOptions=function(e){void 0===e&&(e={});var t=e.dsn,n=e.beforeDataReport,r=e.configReportXhr,o=e.useImgUpload,a=e.apiKey;h(t,"dsn","string")&&(this.errorDsn=t),h(a,"apiKey","string")&&(this.apiKey=a),h(o,"useImgUpload","string")&&(this.useImgUpload=o),h(n,"beforeDataReport","function")&&(this.beforeDataReport=n),h(r,"configReportXhr","function")&&(this.configReportXhr=r)},e.prototype.send=function(e){return ee(this,void 0,void 0,(function(){var t,n;return te(this,(function(r){switch(r.label){case 0:return t="",Y(e)&&(a=t=this.errorDsn,o.isString(a)&&""===a.trim()||null==a)?(console.log("上传数据: ",e),i&&function(e){q(this,void 0,void 0,(function(){var t=this;return X(this,(function(n){switch(n.label){case 0:return n.trys.push([0,2,,3]),V.idbIsSupported()?(L||(L=new V),[4,(r=function(){return q(t,void 0,void 0,(function(){return X(this,(function(t){switch(t.label){case 0:return[4,L.addLog(JSON.stringify(e))];case 1:return t.sent(),[2]}}))}))},new Promise((function(e,t){j.push({asyncF:r,resolution:e,rejection:t}),A()})))]):(console.log(I.DB_NOT_SUPPORT),[2]);case 1:case 2:return n.sent(),[3,3];case 3:return[2]}var r}))}))}(e),[2]):[4,this.beforePost(e)];case 1:return(n=r.sent())&&i?[2,this.useImgUpload?this.imgRequest(n,t):this.xhrPost(n,t)]:[2]}var a}))}))},e}(),re=new ne,oe=function(){function t(){this.beforeAppAjaxSend=function(){},this.throttleDelayTime=0,this.maxDuplicateCount=2,this.maxBreadcrumbs=20}return t.prototype.bindOptions=function(t){void 0===t&&(t={});var n,r,o,a=t.beforeAppAjaxSend,i=t.onRouteChange,u=t.filterXhrUrlRegExp,c=t.throttleDelayTime,s=t.maxDuplicateCount,l=t.maxBreadcrumbs;h(a,"beforeAppAjaxSend","function")&&(this.beforeAppAjaxSend=a),h(i,"onRouteChange","function")&&(this.onRouteChange=i),h(c,"throttleDelayTime","number")&&(this.throttleDelayTime=c),h(l,"maxBreadcrumbs","number")&&(this.maxBreadcrumbs=l),h(s,"maxDuplicateCount","number")&&(this.maxDuplicateCount=s),r="filterXhrUrlRegExp",(function(t,n){return e.call(t)===n}(n=u,o="[object RegExp]")||(void 0!==n&&console.log("".concat(r,"期望传入").concat(o,"类型，目前是").concat(e.call(n),"类型")),0))&&(this.filterXhrUrlRegExp=u)},t}(),ae=new oe;function ie(e){void 0===e&&(e={}),P.bindOptions(e),re.bindOptions(e),ae.bindOptions(e)}var ue={};function ce(e,t){e&&ue[e]&&ue[e].forEach((function(n){!function(e,r){try{n(t)}catch(e){console.log("err",e),r&&r(e)}}(0,(function(t){var r;console.log("重写事件triggerHandlers的回调函数发生错误\nType:".concat(e,"\nName: ").concat((r=n,r&&"function"==typeof r&&r.name||"<anonymous>"),"\nError: ").concat(t))}))}))}var se,le={img:"图片",script:"js脚本"},fe=function(){return fe=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},fe.apply(this,arguments)},he={handleHttp:function(e,t){var n=0===e.status||e.status===N.BAD_REQUEST||e.status>N.UNAUTHORIZED,r=function(e){var t="",n=e.elapsedTime,r=e.time,o=e.method,a=e.traceId,i=e.type,u=e.status,c="".concat(i,"--").concat(o);return t=(t=0===u?n<=1e3?"http请求失败，失败原因：跨域限制或域名不存在":"http请求失败，失败原因：超时":function(e){if(e<400)return b.Ok;if(e>=400&&e<500)switch(e){case 401:return b.Unauthenticated;case 403:return b.PermissionDenied;case 404:return b.NotFound;case 409:return b.AlreadyExists;case 413:return b.FailedPrecondition;case 429:return b.ResourceExhausted;default:return b.InvalidArgument}if(e>=500&&e<600)switch(e){case 501:return b.Unimplemented;case 503:return b.Unavailable;case 504:return b.DeadlineExceeded;default:return b.InternalError}return b.UnknownError}(u))===b.Ok?t:"".concat(t," ").concat(Z(e.url)),{type:v.FETCH_ERROR,url:s(),time:r,elapsedTime:n,level:p.Low,message:t,name:c,request:{httpType:i,traceId:a,method:o,url:e.url,data:e.reqData||""},response:{status:u,data:e.responseText}}}(e);P.push({type:t,category:P.getCategory(t),data:fe({},r),level:p.Info,time:e.time}),n&&(P.push({type:t,category:P.getCategory(g.CODE_ERROR),data:fe({},r),level:p.Error,time:e.time}),re.send(r))},handleError:function(e){var t;if(e.target.localName){var n=(t=e.target,{type:v.RESOURCE_ERROR,url:s(),message:"资源地址："+(m(t.src,120)||m(t.href,120)),level:p.Low,time:Date.now(),name:"".concat(le[t.localName]||t.localName,"加载失败")});return P.push({type:g.RESOURCE,category:P.getCategory(g.RESOURCE),data:n,level:p.Error}),re.send(n)}var r,o=e.message,i=e.filename,u=e.lineno,c=e.colno,l=e.error;l&&a(l)&&(r=C(l,p.Normal)),r||(r=he.handleNotErrorInstance(o,i,u,c)),r.type=v.JAVASCRIPT_ERROR,P.push({type:g.CODE_ERROR,category:P.getCategory(g.CODE_ERROR),data:fe({},r),level:p.Error}),re.send(r)},handleNotErrorInstance:function(e,t,n,r){var o=v.UNKNOWN,a=t||s(),i=e,u=e.match(_);u[1]&&(o=u[1],i=u[2]);var c={url:a,func:v.UNKNOWN_FUNCTION,args:v.UNKNOWN,line:n,col:r};return{url:a,name:o,message:i,level:p.Normal,time:Date.now(),stack:[c]}},handleHistory:function(e){var t=e.from,n=e.to,r=S(t).relative,o=S(n).relative;P.push({type:g.ROUTE,category:P.getCategory(g.ROUTE),data:{from:r||"/",to:o||"/"},level:p.Info});var a=ae.onRouteChange;a&&a(t,n)},handleHashchange:function(e){var t=e.oldURL,n=e.newURL,r=S(t).relative,o=S(n).relative;P.push({type:g.ROUTE,category:P.getCategory(g.ROUTE),data:{from:r,to:o},level:p.Info});var a=ae.onRouteChange;a&&a(r,o)},handleUnhandleRejection:function(e){var t,n={type:v.PROMISE_ERROR,message:(t=e.reason,o.isString(t)?t:o.isUndefined(t)?"undefined":JSON.stringify(t)),url:s(),name:e.type,time:Date.now(),level:p.Low};a(e.reason)&&(n=fe(fe({},n),C(e.reason,p.Low))),P.push({type:g.UNHANDLEDERJECTION,category:P.getCategory(g.UNHANDLEDERJECTION),data:fe({},n),level:p.Error}),re.send(n)}},pe=function(){return pe=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},pe.apply(this,arguments)};function de(e){return ae.filterXhrUrlRegExp&&ae.filterXhrUrlRegExp.test(e)}function me(e){(function(e){return!(!e||(t=e.type,c[t])||(function(e,t){c[e]||(c[e]=!0)}(e.type),ue[e.type]=ue[e.type]||[],ue[e.type].push(e.callback),0));var t})(e)&&function(e){switch(e){case R.XHR:!function(){if("XMLHttpRequest"in u){var e=XMLHttpRequest.prototype;f(e,"open",(function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];this.mito_xhr={method:o.isString(t[0])?t[0]:t[0].toUpperCase(),url:t[1],sTime:Date.now(),type:w.XHR},e.apply(this,t)}})),f(e,"send",(function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=this.mito_xhr,o=r.method,a=r.url;ae.beforeAppAjaxSend&&ae.beforeAppAjaxSend({method:o,url:a},this),l(this,"readystatechange",(function(){if(!(o===H.Post&&re.isSdkTransportUrl(a)||de(a))){var e=this,n=e.responseType,r=e.response,i=e.status;if(4===e.readyState){this.mito_xhr.reqData=t[0];var u=Date.now();this.mito_xhr.time=this.mito_xhr.sTime,this.mito_xhr.status=i,-1!==["","json","text"].indexOf(n)&&(this.mito_xhr.responseText="object"==typeof r?JSON.stringify(r):r),this.mito_xhr.elapsedTime=u-this.mito_xhr.sTime,ce(R.XHR,this.mito_xhr)}}})),e.apply(this,t)}}))}}();break;case R.FETCH:"fetch"in u&&f(u,R.FETCH,(function(e){return function(t,n){void 0===n&&(n={});var r=Date.now(),o=n&&n.method||"GET",a={type:w.FETCH,method:o,reqData:n&&n.body,url:t},i=new Headers(n.headers||{});return Object.assign(i,{setRequestHeader:i.set}),ae.beforeAppAjaxSend&&ae.beforeAppAjaxSend({method:o,url:t},i),n=pe(pe({},n),{headers:i}),e.apply(u,[t,n]).then((function(e){var n=e.clone(),i=Date.now();a=pe(pe({},a),{elapsedTime:i-r,status:n.status,time:r}),n.text().then((function(e){o===H.Post&&re.isSdkTransportUrl(t)||de(t)||(a.responseText=n.status>N.UNAUTHORIZED&&e,ce(R.FETCH,a))}))}),(function(e){var n=Date.now();if(!(o===H.Post&&re.isSdkTransportUrl(t)||de(t)))throw a=pe(pe({},a),{elapsedTime:n-r,status:0,time:r}),ce(R.FETCH,a),e}))}}));break;case R.ERROR:l(u,"error",(function(e){ce(R.ERROR,e)}),!0);break;case R.CONSOLE:"console"in u&&["log","debug","info","warn","error","assert"].forEach((function(e){e in u.console&&f(u.console,e,(function(t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];t&&(ce(R.CONSOLE,{args:n,level:e}),t.apply(u.console,n))}}))}));break;case R.HISTORY:!function(){if(t=(e=u.chrome)&&e.app&&e.app.runtime,n="history"in u&&!!u.history.pushState&&!!u.history.replaceState,!t&&n){var e,t,n,r=u.onpopstate;u.onpopstate=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=s(),o=se;ce(R.HISTORY,{from:o,to:n}),r&&r.apply(this,e)},f(u.history,"pushState",o),f(u.history,"replaceState",o)}function o(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length>2?t[2]:void 0;if(r){var o=se,a=String(r);return se=a,ce(R.HISTORY,{from:o,to:a}),e.apply(this,t)}}}}();break;case R.UNHANDLEDERJECTION:l(u,R.UNHANDLEDERJECTION,(function(e){ce(R.UNHANDLEDERJECTION,e)}));break;case R.DOM:!function(){if("document"in u){var e,t,n,r=(e=ce,t=ae.throttleDelayTime,n=!0,function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];n&&(e.apply(this,r),n=!1,setTimeout((function(){n=!0}),t))});l(u.document,"click",(function(){r(R.DOM,{category:"click",data:this},!0)}))}}()}}(e.type)}function be(e){void 0===e&&(e={}),function(e){void 0===e&&(e={}),"XMLHttpRequest"in u&&!e.disabled&&(ie(e),me({callback:function(e){he.handleHttp(e,g.XHR)},type:R.XHR}),me({callback:function(e){he.handleHttp(e,g.FETCH)},type:R.FETCH}),me({callback:function(e){he.handleError(e)},type:R.ERROR}),me({callback:function(e){he.handleHistory(e)},type:R.HISTORY}),me({callback:function(e){he.handleUnhandleRejection(e)},type:R.UNHANDLEDERJECTION}),me({callback:function(e){var t=function(e){var t=e.tagName.toLowerCase();if("body"===t)return null;var n=e.classList.value;n=""!==n?' class="'.concat(n,'"'):"";var r=e.id?' id="'.concat(e.id,'"'):"",o=e.innerText;return"<".concat(t).concat(r).concat(""!==n?n:"",">").concat(o,"</").concat(t,">")}(e.data.activeElement);t&&P.push({type:g.CLICK,category:P.getCategory(g.CLICK),data:t,level:p.Info})},type:R.DOM}),me({callback:function(e){he.handleHashchange(e)},type:R.HASHCHANGE}))}(e)}se=s()})(),r})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,