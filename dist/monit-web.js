!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Monit=t():e.Monit=t()}(self,(()=>(()=>{var e={213:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(742),u=n(606),c="IDB_MANAGER_STORE",s="updateTime",l="expireTime";function f(e){var t=e.onlyIndex,n=e.lowerIndex,r=e.upperIndex,o=e.lowerExclusive,a=void 0!==o&&o,i=e.upperExclusive,u=void 0!==i&&i;return void 0!==t?IDBKeyRange.only(t):void 0!==n&&void 0!==r?IDBKeyRange.bound(n,r,a,u):void 0!==n?IDBKeyRange.lowerBound(n,a):IDBKeyRange.upperBound(r,u)}function p(e){var t,n=Date.now();return r(r({},e.item),((t={}).updateTime=n,t.expireTime=void 0!==e.itemDuration?e.itemDuration+n:-1,t))}function h(e){return e?e.expireTime>0&&e.expireTime<Date.now()?null:(delete e.updateTime,delete e.expireTime,e):null}function d(e){return o(this,void 0,void 0,(function(){var t,n,r,o,i;return a(this,(function(a){switch(a.label){case 0:return[4,y()];case 1:return[4,g(t=a.sent(),c,e.name)];case 2:return!(n=a.sent())||e.version>n.version?(r=t.transaction(c,"readwrite"),o=r.objectStore(c),i={dbName:e.name,tableList:e.tableList,version:e.version},o.put(p({item:i,tableName:c})),[4,r.complete]):[3,4];case 3:a.sent(),t.close(),a.label=4;case 4:return[2]}}))}))}function m(e){return o(this,void 0,void 0,(function(){var t,n;return a(this,(function(r){switch(r.label){case 0:return[4,y()];case 1:return t=r.sent(),(n=t.transaction(c,"readwrite")).objectStore(c).delete(e),[4,n.complete];case 2:return r.sent(),t.close(),[2]}}))}))}function b(e){return o(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,d(e)];case 1:return t.sent(),[4,u.open(e.name,e.version,(function(t){E(t,e.tableList)}))];case 2:return[2,t.sent()]}}))}))}function y(){return o(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,u.open("IDB_MANAGER_DB",1,(function(e){!function(e){e.createObjectStore(c,{keyPath:"dbName"})}(e)}))];case 1:return[2,e.sent()]}}))}))}function v(e){return o(this,void 0,void 0,(function(){var t,n;return a(this,(function(r){switch(r.label){case 0:return[4,y()];case 1:return[4,g(t=r.sent(),c,e)];case 2:return n=r.sent(),t.close(),n?[4,u.open(n.dbName,n.version,(function(e){E(e,n.tableList||[])}))]:[3,4];case 3:return[2,r.sent()];case 4:return[2,null]}}))}))}function g(e,t,n){return o(this,void 0,void 0,(function(){var r;return a(this,(function(o){switch(o.label){case 0:if(!e.objectStoreNames.contains(t))return[3,8];r=e.transaction(t,"readonly"),o.label=1;case 1:return o.trys.push([1,,3,7]),[4,r.objectStore(t).get(n)];case 2:return[2,h(o.sent())];case 3:return o.trys.push([3,5,,6]),[4,r.complete];case 4:case 5:return o.sent(),[3,6];case 6:return[7];case 7:return[3,9];case 8:return[2,null];case 9:return[2]}}))}))}function E(e,t){try{t.forEach((function(t){if(e.objectStoreNames.contains(t.tableName)){var n=e.transaction(t.tableName).objectStore(t.tableName);(t.indexList||[]).forEach((function(e){n.indexNames.contains(e.indexName)||n.createIndex(e.indexName,e.indexName,{unique:e.unique})}))}else{var o=t.primaryKey||"id",a=e.createObjectStore(t.tableName,r({keyPath:o},"id"===o?{autoIncrement:!0}:{}));a.createIndex(o,o,{unique:!0}),(t.indexList||[]).forEach((function(e){a.createIndex(e.indexName,e.indexName,{unique:e.unique})})),a.createIndex(s,s,{unique:!1}),a.createIndex(l,l,{unique:!1})}}))}catch(t){e.close()}}function R(e,t,n){return o(this,void 0,void 0,(function(){var r;return a(this,(function(o){switch(o.label){case 0:return o.trys.push([0,3,8,9]),[4,n()];case 1:return o.sent(),[4,e.complete];case 2:return o.sent(),[3,9];case 3:r=o.sent();try{e.abort()}catch(e){}o.label=4;case 4:return o.trys.push([4,6,,7]),[4,e.complete];case 5:case 6:return o.sent(),[3,7];case 7:throw r;case 8:return t.close(),[7];case 9:return[2]}}))}))}function w(e,t){return o(this,void 0,void 0,(function(){var n,r,u,c=this;return a(this,(function(s){switch(s.label){case 0:return n=t.filter((function(t){return e.objectStoreNames.contains(t.tableName)})),r=i.deduplicateList(n.map((function(e){return e.tableName}))),[4,R(u=e.transaction(r,"readwrite"),e,(function(){return o(c,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,Promise.all(n.map((function(e){var t=e.tableName,n=e.indexRange,r=u.objectStore(t);return n?new Promise((function(e){r.index(n.indexName).iterateCursor(f(n),(function(t){t?(r.delete(t.primaryKey),t.continue()):e()}))})):r.clear()})))];case 1:return e.sent(),[2]}}))}))}))];case 1:return s.sent(),[2]}}))}))}function O(e,t){return o(this,void 0,void 0,(function(){var n,r,u,c=this;return a(this,(function(s){switch(s.label){case 0:return n=i.deduplicateList(t.map((function(e){return e.tableName}))),[4,D(e.name,n.map((function(e){return{tableName:e,indexRange:{indexName:l,upperIndex:+new Date,upperExclusive:!1}}})))];case 1:return s.sent(),[4,b(e)];case 2:return r=s.sent(),[4,R(u=r.transaction(n,"readwrite"),r,(function(){return o(c,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,Promise.all(t.map((function(e){return u.objectStore(e.tableName).put(p(e))})))];case 1:return e.sent(),[2]}}))}))}))];case 3:return s.sent(),[2]}}))}))}function N(e,t,n){return o(this,void 0,void 0,(function(){var r;return a(this,(function(o){switch(o.label){case 0:return[4,v(e)];case 1:if(!(r=o.sent()))return[3,7];o.label=2;case 2:return o.trys.push([2,4,5,6]),[4,g(r,t,n)];case 3:return[2,o.sent()];case 4:throw o.sent();case 5:return r.close(),[7];case 6:return[3,8];case 7:return[2,null];case 8:return[2]}}))}))}function x(e,t){return o(this,void 0,void 0,(function(){var n,r,o,i,u,c,s;return a(this,(function(a){switch(a.label){case 0:return n=t.tableName,r=t.indexRange,[4,v(e)];case 1:if(!(o=a.sent()))return[3,17];a.label=2;case 2:return a.trys.push([2,14,15,16]),i=[],o.objectStoreNames.contains(n)?[3,3]:[3,13];case 3:u=o.transaction(n,"readonly"),a.label=4;case 4:return a.trys.push([4,,9,13]),c=u.objectStore(n),r?[3,6]:[4,c.getAll()];case 5:return s=a.sent(),i=(s||[]).map(h).filter((function(e){return null!==e})),[3,8];case 6:return[4,new Promise((function(e){c.index(r.indexName).iterateCursor(f(r),(function(t){if(t){var n=h(t.value);n&&i.push(n),t.continue()}else e()}))}))];case 7:a.sent(),a.label=8;case 8:return[3,13];case 9:return a.trys.push([9,11,,12]),[4,u.complete];case 10:case 11:return a.sent(),[3,12];case 12:return[7];case 13:return[2,i];case 14:throw a.sent();case 15:return o.close(),[7];case 16:return[3,18];case 17:return[2,[]];case 18:return[2]}}))}))}function I(e){return o(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,m(e)];case 1:return t.sent(),[4,u.delete(e)];case 2:return t.sent(),[2]}}))}))}function D(e,t){return o(this,void 0,void 0,(function(){var n;return a(this,(function(r){switch(r.label){case 0:return[4,v(e)];case 1:return(n=r.sent())?[4,w(n,t)]:[3,3];case 2:return r.sent(),[3,4];case 3:case 4:return[2]}}))}))}t.addItems=O,t.getItem=N,t.getItemsInRange=x,t.deleteDB=I,t.deleteItems=D,t.default={addItems:O,getItem:N,getItemsInRange:x,deleteDB:I,deleteItems:D}},880:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(266),u=n(213),c=n(742),s=!0;function l(e){if(c.paramChecker(e,c.ParamCheckerEnum.NotNullObject,"tableIndexRange",!1),c.paramChecker(e.tableName,c.ParamCheckerEnum.String,"tableIndexRange's",!1),c.paramChecker(e.indexRange,c.ParamCheckerEnum.NotNullObject,"tableIndexRange's indexRange",s),e.indexRange){var t=e.indexRange,n=t.indexName,r=t.onlyIndex,o=t.lowerIndex,a=t.upperIndex,i=t.lowerExclusive,u=t.upperExclusive;if(c.paramChecker(n,c.ParamCheckerEnum.String,"indexRange's indexName",!1),void 0===r&&void 0===o&&void 0===a)throw new Error("indexRange should have bounds or value for the index");if(void 0!==o&&void 0!==a&&o>=a)throw new Error("lowerIndex should be less than upperIndex");o&&a&&c.paramChecker(i,c.ParamCheckerEnum.Boolean,"indexRange's lowerExclusive",s),c.paramChecker(u,c.ParamCheckerEnum.Boolean,"indexRange's upperExclusive",s)}}function f(){try{return i.default(),!0}catch(e){return!1}}t.idbIsSupported=f;var p=function(){function e(e){i.default(),function(e){c.paramChecker(e,c.ParamCheckerEnum.NotNullObject,"dbConfig",!1),c.paramChecker(e.dbName,c.ParamCheckerEnum.String,"dbName",!1),c.paramChecker(e.dbVersion,c.ParamCheckerEnum.NonNegativeInteger,"dbVersion",s),c.paramChecker(e.itemDuration,c.ParamCheckerEnum.NonNegativeInteger,"itemDuration of dbConfig",s),c.paramChecker(e.tables,c.ParamCheckerEnum.NotNullObject,"tables",s),Object.keys(e.tables||{}).forEach((function(t){var n=e.tables[t];c.paramChecker(n.primaryKey,c.ParamCheckerEnum.String,"primaryKey",s),c.paramChecker(n.itemDuration,c.ParamCheckerEnum.NonNegativeInteger,"itemDuration of table",s),c.paramChecker(n.indexList,c.ParamCheckerEnum.Array,"indexList",s),(n.indexList||[]).forEach((function(e){c.paramChecker(e.indexName,c.ParamCheckerEnum.String,"indexName",!1),c.paramChecker(e.unique,c.ParamCheckerEnum.Boolean,"unique",s)}))}))}(e),this.name=e.dbName,this.version=c.optionWithBackup(e.dbVersion,1),this.tableList=Object.keys(e.tables||{}).map((function(t){return r({tableName:t},e.tables[t])})),this.itemDuration=e.itemDuration}return e.prototype.addItems=function(e){return o(this,void 0,void 0,(function(){var t,n,o=this;return a(this,(function(a){switch(a.label){case 0:return t=function(e,t,n){return void 0!==n?n:void 0!==t?t:e},i=e,l=this.tableList,c.paramChecker(i,c.ParamCheckerEnum.Array,"items",!1),i.forEach((function(e){c.paramChecker(e.tableName,c.ParamCheckerEnum.String,"item's tableName",!1),c.paramChecker(e.itemDuration,c.ParamCheckerEnum.NonNegativeInteger,"item's itemDuration",s);var t=l.filter((function(t){return t.tableName===e.tableName}))[0];if(!t)throw new Error("Table "+e.tableName+" does not exist");if(void 0!==t.primaryKey&&Object.getOwnPropertyNames(e.item).indexOf(t.primaryKey)<0)throw new Error("primaryKey is needed for item in table "+e.tableName)})),n=e.map((function(e){var n=o.tableList.filter((function(t){return t.tableName===e.tableName}))[0];return r({itemDuration:t(o.itemDuration,n.itemDuration,e.itemDuration)},e)})),[4,u.default.addItems({name:this.name,tableList:this.tableList,version:this.version},n)];case 1:return a.sent(),[2]}var i,l}))}))},e.prototype.getItem=function(e,t){return o(this,void 0,void 0,(function(){return a(this,(function(n){switch(n.label){case 0:return[4,d(this.name,e,t)];case 1:return[2,n.sent()]}}))}))},e.prototype.getItemsInRange=function(e){return o(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,m(this.name,e)];case 1:return[2,t.sent()]}}))}))},e.prototype.deleteItemsInRange=function(e){return o(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return c.paramChecker(e,c.ParamCheckerEnum.Array,"tableIndexRanges",!1),e.forEach((function(e){l(e)})),[4,u.default.deleteItems(this.name,e)];case 1:return t.sent(),[2]}}))}))},e}();function h(e){return o(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return i.default(),c.paramChecker(e,c.ParamCheckerEnum.String,"dbName",!1),[4,u.default.deleteDB(e)];case 1:return t.sent(),[2]}}))}))}function d(e,t,n){return o(this,void 0,void 0,(function(){return a(this,(function(r){switch(r.label){case 0:return c.paramChecker(e,c.ParamCheckerEnum.String,"dbName",!1),c.paramChecker(t,c.ParamCheckerEnum.String,"tableName",!1),[4,u.default.getItem(e,t,n)];case 1:return[2,r.sent()]}}))}))}function m(e,t){return o(this,void 0,void 0,(function(){return a(this,(function(n){switch(n.label){case 0:return c.paramChecker(e,c.ParamCheckerEnum.String,"dbName",!1),l(t),[4,u.default.getItemsInRange(e,t)];case 1:return[2,n.sent()]}}))}))}t.CustomDB=p,t.deleteDB=h,t.getItemFromDB=d,t.getItemsInRangeFromDB=m,t.default={idbIsSupported:f,CustomDB:p,deleteDB:h,getItemFromDB:d,getItemsInRangeFromDB:m}},266:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){if(!window)throw new Error("idb-managed can not run in non-browser environment");for(var e=0,t=["indexedDB","IDBDatabase","IDBObjectStore","IDBTransaction","IDBIndex","IDBCursor","IDBKeyRange","IDBRequest"];e<t.length;e++){var n=t[e];if(!window.hasOwnProperty(n)||!window[n])throw new Error(n+" is not supported in window")}}},606:e=>{function t(e){return Array.prototype.slice.call(e)}function n(e){return new Promise((function(t,n){e.onsuccess=function(){t(e.result)},e.onerror=function(){n(e.error)}}))}function r(e,t,r){var o,a=new Promise((function(a,i){n(o=e[t].apply(e,r)).then(a,i)}));return a.request=o,a}function o(e,t,n){var o=r(e,t,n);return o.then((function(e){if(e)return new l(e,o.request)}))}function a(e,t,n){n.forEach((function(n){Object.defineProperty(e.prototype,n,{get:function(){return this[t][n]},set:function(e){this[t][n]=e}})}))}function i(e,t,n,o){o.forEach((function(o){o in n.prototype&&(e.prototype[o]=function(){return r(this[t],o,arguments)})}))}function u(e,t,n,r){r.forEach((function(r){r in n.prototype&&(e.prototype[r]=function(){return this[t][r].apply(this[t],arguments)})}))}function c(e,t,n,r){r.forEach((function(r){r in n.prototype&&(e.prototype[r]=function(){return o(this[t],r,arguments)})}))}function s(e){this._index=e}function l(e,t){this._cursor=e,this._request=t}function f(e){this._store=e}function p(e){this._tx=e,this.complete=new Promise((function(t,n){e.oncomplete=function(){t()},e.onerror=function(){n(e.error)},e.onabort=function(){n(e.error)}}))}function h(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new p(n)}function d(e){this._db=e}var m;if(f.prototype.createIndex=function(){return new s(this._store.createIndex.apply(this._store,arguments))},f.prototype.index=function(){return new s(this._store.index.apply(this._store,arguments))},p.prototype.objectStore=function(){return new f(this._tx.objectStore.apply(this._tx,arguments))},h.prototype.createObjectStore=function(){return new f(this._db.createObjectStore.apply(this._db,arguments))},d.prototype.transaction=function(){return new p(this._db.transaction.apply(this._db,arguments))},function(){try{return["IDBIndex","IDBCursor","IDBObjectStore","IDBTransaction","IDBDatabase"].forEach((function(e){if(window&&(!window[e]||!window.hasOwnProperty(e)))throw new Error(e)})),!0}catch(e){return!1}}())a(s,"_index",["name","keyPath","multiEntry","unique"]),i(s,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),c(s,"_index",IDBIndex,["openCursor","openKeyCursor"]),a(l,"_cursor",["direction","key","primaryKey","value"]),i(l,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach((function(e){e in IDBCursor.prototype&&(l.prototype[e]=function(){var t=this,r=arguments;return Promise.resolve().then((function(){return t._cursor[e].apply(t._cursor,r),n(t._request).then((function(e){if(e)return new l(e,t._request)}))}))})})),a(f,"_store",["name","keyPath","indexNames","autoIncrement"]),i(f,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),c(f,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),u(f,"_store",IDBObjectStore,["deleteIndex"]),a(p,"_tx",["objectStoreNames","mode"]),u(p,"_tx",IDBTransaction,["abort"]),a(h,"_db",["name","version","objectStoreNames"]),u(h,"_db",IDBDatabase,["deleteObjectStore","close"]),a(d,"_db",["name","version","objectStoreNames"]),u(d,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach((function(e){[f,s].forEach((function(n){e in n.prototype&&(n.prototype[e.replace("open","iterate")]=function(){var n=t(arguments),r=n[n.length-1],o=this._store||this._index,a=o[e].apply(o,n.slice(0,-1));a.onsuccess=function(){r(a.result)}})}))})),[s,f].forEach((function(e){e.prototype.getAll||(e.prototype.getAll=function(e,t){var n=this,r=[];return new Promise((function(o){n.iterateCursor(e,(function(e){e?(r.push(e.value),void 0===t||r.length!=t?e.continue():o(r)):o(r)}))}))})})),m={open:function(e,t,n){var o=r(indexedDB,"open",[e,t]),a=o.request;return a&&(a.onupgradeneeded=function(e){if(n){var t=new h(a.result,e.oldVersion,a.transaction);t.transaction.complete.catch((function(){})),n(t)}}),o.then((function(e){return new d(e)}))},delete:function(e){return r(indexedDB,"deleteDatabase",[e])}};else{var b="indexedDB is not supported";m={open:function(){return Promise.reject(new Error(b))},delete:function(){return Promise.reject(new Error(b))}}}e.exports=m},742:(e,t)=>{"use strict";function n(e){return!isNaN(e)&&e>=0}Object.defineProperty(t,"__esModule",{value:!0}),t.ParamCheckerEnum={NonNegativeInteger:{rule:n,desc:"needs to be a non-negative integer"},NotNullObject:{rule:function(e){return e&&"object"==typeof e},desc:"needs to be a not-null object"},String:{rule:function(e){return"string"==typeof e},desc:"needs to be a string"},Array:{rule:function(e){return e instanceof Array},desc:"needs to be an Array"},Boolean:{rule:function(e){return"boolean"==typeof e},desc:"needs to be a boolean"}},t.isNonNegativeInteger=n,t.optionWithBackup=function(e,t){return void 0!==e?e:t},t.paramChecker=function(e,t,n,r){var o=n+" "+t.desc;if(r){if(void 0!==e&&!t.rule(e))throw new Error(o+" if defined")}else if(!t.rule(e))throw new Error(o)},t.deduplicateList=function(e){return e.reduce((function(e,t){return e.indexOf(t)<0?e.concat(t):e}),[])}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r].call(a.exports,a,a.exports,n),a.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return(()=>{"use strict";n.r(r),n.d(r,{init:()=>Ee,log:()=>he});var e=Object.prototype.toString;function t(t){return function(n){return e.call(n)==="[object ".concat(t,"]")}}var o={isNumber:t("Number"),isString:t("String"),isBoolean:t("Boolean"),isNull:t("Null"),isUndefined:t("Undefined"),isSymbol:t("Symbol"),isFunction:t("Function"),isObject:t("Object"),isArray:t("Array"),isWindow:t("Window")};function a(t){switch(e.call(t)){case"[object Error]":case"[object Exception]":case"[object DOMException]":return!0;default:return function(e,t){try{return e instanceof t}catch(e){return!1}}(t,Error)}}var i=o.isWindow("undefined"!=typeof window?window:0),u=function(){if(i)return window}(),c={};function s(){return"undefined"==typeof document||null==document.location?"":document.location.href}function l(e,t,n,r){void 0===r&&(r=!1),e.addEventListener(t,n,r)}function f(e,t,n,r){if(void 0===r&&(r=!1),void 0!==e&&(t in e||r)){var o=n(e[t]);"function"==typeof o&&(e[t]=o)}}function p(e,t,n){return!!function(e,t){return typeof e===t}(e,n)||(void 0!==e&&console.log("".concat(t,"期望传入").concat(n,"类型，目前是").concat(typeof e,"类型")),!1)}function h(t,n,r){return!!function(t,n){return e.call(t)===n}(t,r)||(void 0!==t&&console.log("".concat(n,"期望传入").concat(r,"类型，目前是").concat(e.call(t),"类型")),!1)}var d,m;function b(e,t){return o.isString(e)?e.slice(0,t)+(e.length>t?":截取前".concat(t,"个字符"):""):""}function y(e){return o.isString(e)?e:o.isUndefined(e)?"undefined":JSON.stringify(e)}(m=d||(d={})).Else="else",m.Error="error",m.Warning="warning",m.Info="info",m.Debug="debug",m.Low="low",m.Normal="normal",m.High="high",m.Critical="critical",function(e){e.fromString=function(t){switch(t){case"debug":return e.Debug;case"info":case"log":case"assert":return e.Info;case"warn":case"warning":return e.Warning;case e.Low:case e.Normal:case e.High:case e.Critical:case"error":return e.Error;default:return e.Else}}}(d||(d={}));var v,g=function(){function e(){this.stack=[],this.isFlushing=!1,"Promise"in u&&(this.micro=Promise.resolve())}return e.prototype.addFn=function(e){var t=this;"function"==typeof e&&("Promise"in u?(this.stack.push(e),this.isFlushing||(this.isFlushing=!0,this.micro.then((function(){t.flushStack()})))):e())},e.prototype.clear=function(){this.stack=[]},e.prototype.getStack=function(){return this.stack},e.prototype.flushStack=function(){var e=this.stack.slice(0);this.stack.length=0,this.isFlushing=!1;for(var t=0;t<e.length;t++){var n=e[t];try{n()}catch(e){}}},e}();!function(e){e.Ok="ok",e.DeadlineExceeded="deadline_exceeded",e.Unauthenticated="unauthenticated",e.PermissionDenied="permission_denied",e.NotFound="not_found",e.ResourceExhausted="resource_exhausted",e.InvalidArgument="invalid_argument",e.Unimplemented="unimplemented",e.Unavailable="unavailable",e.InternalError="internal_error",e.UnknownError="unknown_error",e.Cancelled="cancelled",e.AlreadyExists="already_exists",e.FailedPrecondition="failed_precondition",e.Aborted="aborted",e.OutOfRange="out_of_range",e.DataLoss="data_loss"}(v||(v={}));var E,R,w,O,N,x,I,D=function(){return D=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},D.apply(this,arguments)};!function(e){e.UNKNOWN="UNKNOWN",e.UNKNOWN_FUNCTION="UNKNOWN_FUNCTION",e.JAVASCRIPT_ERROR="JAVASCRIPT_ERROR",e.LOG_ERROR="LOG_ERROR",e.FETCH_ERROR="FETCH_ERROR",e.RESOURCE_ERROR="RESOURCE_ERROR",e.PROMISE_ERROR="PROMISE_ERROR",e.ROUTE_ERROR="ROUTE_ERROR"}(E||(E={})),D({},E),(I=R||(R={})).ROUTE="Route",I.CLICK="UI.Click",I.CONSOLE="Console",I.XHR="Xhr",I.FETCH="Fetch",I.UNHANDLEDERJECTION="Unhandledrejection",I.RESOURCE="Resource",I.CODE_ERROR="Code Error",I.CUSTOMER="Customer",function(e){e.HTTP="http",e.USER="user",e.DEBUG="debug",e.EXCEPTION="exception",e.LIFECYCLE="lifecycle"}(w||(w={})),function(e){e.XHR="xhr",e.FETCH="fetch",e.CONSOLE="console",e.DOM="dom",e.HISTORY="history",e.ERROR="error",e.HASHCHANGE="hashchange",e.UNHANDLEDERJECTION="unhandledrejection"}(O||(O={})),function(e){e.XHR="xhr",e.FETCH="fetch"}(N||(N={})),function(e){e[e.BAD_REQUEST=400]="BAD_REQUEST",e[e.UNAUTHORIZED=401]="UNAUTHORIZED",e[e.INTERNAL_EXCEPTION=500]="INTERNAL_EXCEPTION"}(x||(x={}));var _,C=/^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/,S=function(){return S=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},S.apply(this,arguments)};function T(e,t){var n={time:Date.now(),url:s(),name:e.name,level:t,message:e.message};if(void 0===e.stack||!e.stack)return n;for(var r,o,a,i=/^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|[a-z]:|\/).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i,u=/^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\[native).*?|[^@]*bundle)(?::(\d+))?(?::(\d+))?\s*$/i,c=/^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i,l=/(\S+) line (\d+)(?: > eval line \d+)* > eval/i,f=/\((\S*)(?::(\d+))(?::(\d+))\)/,p=e.stack.split("\n"),h=[],d=0,m=p.length;d<m;++d){if(o=i.exec(p[d])){var b=o[2]&&0===o[2].indexOf("native");o[2]&&0===o[2].indexOf("eval")&&(r=f.exec(o[2]))&&(o[2]=r[1],o[3]=r[2],o[4]=r[3]),a={url:b?null:o[2],func:o[1]||E.UNKNOWN_FUNCTION,args:b?[o[2]]:[],line:o[3]?+o[3]:null,column:o[4]?+o[4]:null}}else if(o=c.exec(p[d]))a={url:o[2],func:o[1]||E.UNKNOWN_FUNCTION,args:[],line:+o[3],column:o[4]?+o[4]:null};else{if(!(o=u.exec(p[d])))continue;o[3]&&o[3].indexOf(" > eval")>-1&&(r=l.exec(o[3]))?(o[3]=r[1],o[4]=r[2],o[5]=null):0!==d||o[5]||void 0===e.columnNumber||(h[0].column=e.columnNumber+1),a={url:o[3],func:o[1]||E.UNKNOWN_FUNCTION,args:o[2]?o[2].split(","):[],line:o[4]?+o[4]:null,column:o[5]?+o[5]:null}}!a.func&&a.line&&(a.func=E.UNKNOWN_FUNCTION),h.push(a)}return h.length?S(S({},n),{stack:h}):null}function k(e){if(!e)return{};var t=e.match(/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);if(!t)return{};var n=t[6]||"",r=t[8]||"";return{host:t[4],path:t[5],protocol:t[2],relative:t[5]+n+r}}function P(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate()).getTime()}!function(e){e.DB_NOT_SUPPORT="IndexedDB is not supported",e.NO_LOG="No log exists",e.REPORT_LOG_SUCC="Report succ",e.REPORT_LOG_FAIL="Report fail",e.EXCEED_TRY_TIMES="Exceed try times",e.EXCEED_LOG_SIZE_LIMIT="Exceed log size day limit"}(_||(_={}));var U=function(){function e(){this.maxBreadcrumbs=10,this.beforePushBreadcrumb=null,this.stack=[]}return e.prototype.push=function(e){if("function"!=typeof this.beforePushBreadcrumb)this.immediatePush(e);else{var t;if(!(t=(0,this.beforePushBreadcrumb)(this,e)))return;this.immediatePush(t)}},e.prototype.immediatePush=function(e){e.time||(e.time=Date.now()),this.stack.length>=this.maxBreadcrumbs&&this.shift(),this.stack.push(e),this.stack.sort((function(e,t){return e.time-t.time}))},e.prototype.shift=function(){return void 0!==this.stack.shift()},e.prototype.clear=function(){this.stack=[]},e.prototype.getStack=function(){return this.stack},e.prototype.getCategory=function(e){switch(e){case R.XHR:case R.FETCH:return w.HTTP;case R.CLICK:case R.ROUTE:return w.USER;case R.CUSTOMER:case R.CONSOLE:return w.DEBUG;case R.UNHANDLEDERJECTION:case R.CODE_ERROR:default:return w.EXCEPTION}},e.prototype.bindOptions=function(e){void 0===e&&(e={});var t=e.maxBreadcrumbs,n=e.beforePushBreadcrumb;p(t,"maxBreadcrumbs","number")&&(this.maxBreadcrumbs=t),p(n,"beforePushBreadcrumb","function")&&(this.beforePushBreadcrumb=n)},e}(),j=new U,B=n(880),A=[],L=!1;function H(){return e=this,t=void 0,r=function(){var e,t,n;return function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}}(this,(function(r){switch(r.label){case 0:if(!(A.length>0)||L)return[3,5];e=A.shift(),L=!0,r.label=1;case 1:return r.trys.push([1,3,,4]),[4,e.asyncF()];case 2:return t=r.sent(),e.resolution(t),[3,4];case 3:return n=r.sent(),e.rejection(n),[3,4];case 4:return L=!1,H(),[3,0];case 5:return[2]}}))},new((n=void 0)||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}));var e,t,n,r}var F,K,M,q=function(){return q=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},q.apply(this,arguments)},X=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}))},G=function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},W="__monitor_detail_table__",J="__logReportName__",z="__log_day_table__",V="__logDay__",Y=6048e5,$=function(){function e(e){var t;this.DB=new B.CustomDB({dbName:e||"__monitor_web_db__",dbVersion:1,tables:(t={},t[W]={indexList:[{indexName:J,unique:!1},{indexName:"__logCreateTime__",unique:!1}]},t.__log_day_table__={primaryKey:V},t)})}return e.prototype.logReportNameFormatter=function(e,t){return"".concat(e,"_").concat(t)},e.prototype.logReportNameParse=function(e){var t=e.split("_");return{logDay:t[0],pageIndex:t[1]}},e.prototype.getLogDayInfo=function(e){return X(this,void 0,void 0,(function(){return G(this,(function(t){switch(t.label){case 0:return[4,this.DB.getItem(z,e)];case 1:return[2,t.sent()]}}))}))},e.prototype.getLogDaysInfo=function(e,t){return X(this,void 0,void 0,(function(){var n;return G(this,(function(r){switch(r.label){case 0:return e!==t?[3,2]:[4,this.DB.getItem(z,e)];case 1:return[2,(n=r.sent())?[n]:[]];case 2:return[4,this.DB.getItemsInRange({tableName:z,indexRange:{indexName:V,lowerIndex:e,upperIndex:t,lowerExclusive:!1,upperExclusive:!1}})];case 3:return[2,r.sent()]}}))}))},e.prototype.getLogsByReportName=function(e){return X(this,void 0,void 0,(function(){return G(this,(function(t){switch(t.label){case 0:return[4,this.DB.getItemsInRange({tableName:z,indexRange:{indexName:J,onlyIndex:e}})];case 1:return[2,t.sent()]}}))}))},e.prototype.addLog=function(e){return X(this,void 0,void 0,(function(){var t,n,r,o,a,i,u,c,s,l,f,p,h,d,m;return G(this,(function(b){switch(b.label){case 0:return t=function(e){for(var t=0,n=0,r=e.length;n<r;n++){var o=e.charCodeAt(n);t+=o<=127?1:o<=2047?2:o<=65535?3:4}return t}(e),g=(v=n=new Date).getFullYear(),E=v.getMonth()+1,R=v.getDate(),r="".concat(g,"-").concat(E<10?"0"+E:E,"-").concat(R<10?"0"+R:R),[4,this.getLogDayInfo(r)];case 1:return(o=b.sent()||((h={}).__logDay__=r,h.totalSize=0,h.reportPagesInfo={pageSizes:[0]},h)).totalSize+t>7340032?(console.log(_.EXCEED_LOG_SIZE_LIMIT),[2]):(o.reportPagesInfo&&o.reportPagesInfo.pageSizes||(o.reportPagesInfo={pageSizes:[0]}),a=o.reportPagesInfo.pageSizes,i=a.length-1,u=a[i],c=u>0&&u+t>1048576,y=a.slice(),c?y.push(t):y[i]+=t,s=y,(d={}).__logReportName__=this.logReportNameFormatter(r,c?i+1:i),d.__logCreateTime__=+n,d.logSize=t,d.logString=e,l=d,(m={}).__logDay__=r,m.totalSize=o.totalSize+t,m.reportPagesInfo={pageSizes:s},f=m,p=Y-(+new Date-P(new Date)),[4,this.DB.addItems([{tableName:z,item:f,itemDuration:p},{tableName:W,item:l,itemDuration:p}])]);case 2:return b.sent(),[2]}var y,v,g,E,R}))}))},e.prototype.incrementalDelete=function(e,t){return X(this,void 0,void 0,(function(){var n,r,o,a,i,u,c,s,l,f,p;return G(this,(function(h){switch(h.label){case 0:return[4,this.getLogDayInfo(e)];case 1:return(n=h.sent())&&n.reportPagesInfo&&n.reportPagesInfo.pageSizes instanceof Array?(r=n.reportPagesInfo.pageSizes,o=n.totalSize,a=r.reduce((function(e,n,r){return t.indexOf(r)>=0?e+n:e}),0),i=t.indexOf(r.length-1)>=0?r.concat([0]):r,u=i.reduce((function(e,n,r){return t.indexOf(r)>=0?e.concat([0]):e.concat([n])}),[]),c=q(q({},n),{reportPagesInfo:{pageSizes:u},totalSize:Math.max(o-a,0)}),s=Y-(+new Date-P(new Date))-(P(new Date)-function(e){var t=(e.match(/(\d+)/g)||[]).map((function(e){return parseInt(e)})),n=t[0],r=t[1],o=t[2];if(n<1e3)throw new Error("Invalid dayString: ".concat(e));return new Date(n,r-1,o)}(e).getTime()),[4,this.DB.addItems([{tableName:z,item:c,itemDuration:s}])]):[3,6];case 2:h.sent(),l=0,f=t,h.label=3;case 3:return l<f.length?(p=f[l],[4,this.DB.deleteItemsInRange([{tableName:W,indexRange:{indexName:J,onlyIndex:this.logReportNameFormatter(e,p)}}])]):[3,6];case 4:h.sent(),h.label=5;case 5:return l++,[3,3];case 6:return[2]}}))}))},e.idbIsSupported=B.idbIsSupported,e.deleteDB=B.deleteDB,e}();function Z(e){return void 0===e.actionType&&!e.isTrackData}!function(e){e.Get="GET",e.Post="POST",e.Put="PUT",e.Delete="DELETE"}(K||(K={})),function(e){e.PAGE="PAGE",e.EVENT="EVENT",e.VIEW="VIEW",e.DURATION="DURATION",e.DURATION_VIEW="DURATION_VIEW",e.OTHER="OTHER"}(M||(M={}));var Q={};function ee(e){return e.replace(/[\?#].*$/,"").replace(/\/\d+([\/]*$)/,"{param}$1")}function te(e){var t=function(e){return Object.keys(e).sort().reduce((function(n,r){return o.isObject(e[r])?n[r]=t(e[r]):n[r]=e[r],n}),{})};try{if(/\{.*\}/.test(e)){var n=JSON.parse(e);return n=t(n),JSON.stringify(n)}}catch(t){return e}}var ne=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}))},re=function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},oe=function(){function e(){this.beforeDataReport=null,this.configReportXhr=null,this.useImgUpload=!1,this.errorDsn="",this.apiKey="",this.queue=new g}return e.prototype.imgRequest=function(e,t){this.queue.addFn((function(){var n=new Image,r=-1===t.indexOf("?")?"?":"&";n.src="".concat(t).concat(r,"data=").concat(encodeURIComponent(JSON.stringify(e))),n=null}))},e.prototype.beforePost=function(e){return ne(this,void 0,void 0,(function(){var t,n;return re(this,(function(r){switch(r.label){case 0:if(Z(e)){if(!(t=function(e,t){var n;switch(e.type){case E.FETCH_ERROR:n=e.type+e.request.method+e.response.data+ee(e.request.url)+t;break;case E.JAVASCRIPT_ERROR:n=e.type+e.name+e.message+t;break;case E.LOG_ERROR:n=e.customTag+e.type+e.name+t;break;case E.PROMISE_ERROR:n=function(e,t){var n=ee(e.url);return e.name===O.UNHANDLEDERJECTION?e.type+te(e.message)+t:e.type+e.name+te(e.message)+n}(e,t);break;default:n=e.type+e.message+t}return n=function(e){var t=0;if(0===e.length)return t;for(var n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t&=t;return t}(n),Q[n]>=ue.maxDuplicateCount?null:("number"==typeof Q[n]?Q[n]++:Q[n]=1,n)}(e,this.apiKey)))return[2,!1];e.errorId=t}return n=this.getTransportData(e),"function"!=typeof this.beforeDataReport?[3,2]:[4,this.beforeDataReport(n)];case 1:if(!(n=r.sent()))return[2,!1];r.label=2;case 2:return[2,n]}}))}))},e.prototype.getTransportData=function(e){return{breadcrumb:j.getStack(),data:e}},e.prototype.xhrPost=function(e,t){return ne(this,void 0,void 0,(function(){var n,r=this;return re(this,(function(o){return n=function(){var n=new XMLHttpRequest;n.open(K.Post,t),n.setRequestHeader("Content-Type","application/json;charset=UTF-8"),n.withCredentials=!0,"function"==typeof r.configReportXhr&&r.configReportXhr(n,e),n.send(JSON.stringify(e))},this.queue.addFn(n),[2]}))}))},e.prototype.isSdkTransportUrl=function(e){var t=!1;return this.errorDsn&&-1!==e.indexOf(this.errorDsn)&&(t=!0),t},e.prototype.bindOptions=function(e){void 0===e&&(e={});var t=e.dsn,n=e.beforeDataReport,r=e.configReportXhr,o=e.useImgUpload,a=e.apiKey;p(t,"dsn","string")&&(this.errorDsn=t),p(a,"apiKey","string")&&(this.apiKey=a),p(o,"useImgUpload","boolean")&&(this.useImgUpload=o),p(n,"beforeDataReport","function")&&(this.beforeDataReport=n),p(r,"configReportXhr","function")&&(this.configReportXhr=r)},e.prototype.send=function(e){return ne(this,void 0,void 0,(function(){var t,n;return re(this,(function(r){switch(r.label){case 0:return t="",Z(e)&&(a=t=this.errorDsn,o.isString(a)&&""===a.trim()||null==a)?(console.log("上传数据: ",e),i&&function(e){X(this,void 0,void 0,(function(){var t=this;return G(this,(function(n){switch(n.label){case 0:return n.trys.push([0,2,,3]),$.idbIsSupported()?(F||(F=new $),[4,(r=function(){return X(t,void 0,void 0,(function(){return G(this,(function(t){switch(t.label){case 0:return[4,F.addLog(JSON.stringify(e))];case 1:return t.sent(),[2]}}))}))},new Promise((function(e,t){A.push({asyncF:r,resolution:e,rejection:t}),H()})))]):(console.log(_.DB_NOT_SUPPORT),[2]);case 1:case 2:return n.sent(),[3,3];case 3:return[2]}var r}))}))}(e),[2]):[4,this.beforePost(e)];case 1:return(n=r.sent())&&i?[2,this.useImgUpload?this.imgRequest(n,t):this.xhrPost(n,t)]:[2]}var a}))}))},e}(),ae=new oe,ie=function(){function e(){this.beforeAppAjaxSend=function(){},this.throttleDelayTime=0,this.maxDuplicateCount=2,this.maxBreadcrumbs=20,this.reportUIClick=!1}return e.prototype.bindOptions=function(e){void 0===e&&(e={});var t=e.beforeAppAjaxSend,n=e.onRouteChange,r=e.filterXhrUrlRegExp,o=e.throttleDelayTime,a=e.maxDuplicateCount,i=e.maxBreadcrumbs,u=e.reportUIClick,c=e.filterDOMRegExp;p(t,"beforeAppAjaxSend","function")&&(this.beforeAppAjaxSend=t),p(n,"onRouteChange","function")&&(this.onRouteChange=n),p(o,"throttleDelayTime","number")&&(this.throttleDelayTime=o),p(i,"maxBreadcrumbs","number")&&(this.maxBreadcrumbs=i),p(a,"maxDuplicateCount","number")&&(this.maxDuplicateCount=a),p(u,"reportUIClick","boolean")&&(this.reportUIClick=u),h(r,"filterXhrUrlRegExp","[object RegExp]")&&(this.filterXhrUrlRegExp=r),h(c,"filterDOMRegExp","[object RegExp]")&&(this.filterDOMRegExp=c)},e}(),ue=new ie;function ce(e){void 0===e&&(e={}),console.log(e),j.bindOptions(e),ae.bindOptions(e),ue.bindOptions(e)}var se={};function le(e,t){e&&se[e]&&se[e].forEach((function(n){!function(e,r){try{n(t)}catch(e){console.log("err",e),r&&r(e)}}(0,(function(t){var r;console.log("重写事件triggerHandlers的回调函数发生错误\nType:".concat(e,"\nName: ").concat((r=n,r&&"function"==typeof r&&r.name||"<anonymous>"),"\nError: ").concat(t))}))}))}var fe={img:"图片",script:"js脚本"},pe=function(){return pe=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},pe.apply(this,arguments)};function he(e){var t=e.message,n=void 0===t?"emptyMsg":t,r=e.tag,o=void 0===r?"":r,i=e.level,u=void 0===i?d.Critical:i,c=e.ex,l=void 0===c?"":c,f=e.type,p=void 0===f?E.LOG_ERROR:f,h={};a(l)&&(h=T(l,u));var m=pe({type:p,level:u,message:y(n),name:"MITO.log",customTag:y(o),time:Date.now(),url:s()},h);j.push({type:R.CUSTOMER,category:j.getCategory(R.CUSTOMER),data:n,level:d.fromString(u.toString())}),ae.send(m)}var de,me=function(){return me=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},me.apply(this,arguments)},be={handleHttp:function(e,t){var n=0===e.status||e.status===x.BAD_REQUEST||e.status>x.UNAUTHORIZED,r=function(e){var t="",n=e.elapsedTime,r=e.time,o=e.method,a=e.traceId,i=e.type,u=e.status,c="".concat(i,"--").concat(o);return t=(t=0===u?n<=1e3?"http请求失败，失败原因：跨域限制或域名不存在":"http请求失败，失败原因：超时":function(e){if(e<400)return v.Ok;if(e>=400&&e<500)switch(e){case 401:return v.Unauthenticated;case 403:return v.PermissionDenied;case 404:return v.NotFound;case 409:return v.AlreadyExists;case 413:return v.FailedPrecondition;case 429:return v.ResourceExhausted;default:return v.InvalidArgument}if(e>=500&&e<600)switch(e){case 501:return v.Unimplemented;case 503:return v.Unavailable;case 504:return v.DeadlineExceeded;default:return v.InternalError}return v.UnknownError}(u))===v.Ok?t:"".concat(t," ").concat(ee(e.url)),{type:E.FETCH_ERROR,url:s(),time:r,elapsedTime:n,level:d.Low,message:t,name:c,request:{httpType:i,traceId:a,method:o,url:e.url,data:e.reqData||""},response:{status:u,data:e.responseText}}}(e);j.push({type:t,category:j.getCategory(t),data:me({},r),level:d.Info,time:e.time}),n&&(j.push({type:t,category:j.getCategory(R.CODE_ERROR),data:me({},r),level:d.Error,time:e.time}),ae.send(r))},handleError:function(e){var t;if(e.target.localName){var n=(t=e.target,{type:E.RESOURCE_ERROR,url:s(),message:"资源地址："+(b(t.src,120)||b(t.href,120)),level:d.Low,time:Date.now(),name:"".concat(fe[t.localName]||t.localName,"加载失败")});return j.push({type:R.RESOURCE,category:j.getCategory(R.RESOURCE),data:n,level:d.Error}),ae.send(n)}var r,o=e.message,i=e.filename,u=e.lineno,c=e.colno,l=e.error;l&&a(l)&&(r=T(l,d.Normal)),r||(r=be.handleNotErrorInstance(o,i,u,c)),r.type=E.JAVASCRIPT_ERROR,j.push({type:R.CODE_ERROR,category:j.getCategory(R.CODE_ERROR),data:me({},r),level:d.Error}),ae.send(r)},handleNotErrorInstance:function(e,t,n,r){var o=E.UNKNOWN,a=t||s(),i=e,u=e.match(C);u[1]&&(o=u[1],i=u[2]);var c={url:a,func:E.UNKNOWN_FUNCTION,args:E.UNKNOWN,line:n,col:r};return{url:a,name:o,message:i,level:d.Normal,time:Date.now(),stack:[c]}},handleHistory:function(e){var t=e.from,n=e.to,r=k(t).relative,o=k(n).relative;j.push({type:R.ROUTE,category:j.getCategory(R.ROUTE),data:{from:r||"/",to:o||"/"},level:d.Info});var a=ue.onRouteChange;a&&a(t,n)},handleHashchange:function(e){var t=e.oldURL,n=e.newURL,r=k(t).relative,o=k(n).relative;j.push({type:R.ROUTE,category:j.getCategory(R.ROUTE),data:{from:r,to:o},level:d.Info});var a=ue.onRouteChange;a&&a(r,o)},handleUnhandleRejection:function(e){var t={type:E.PROMISE_ERROR,message:y(e.reason),url:s(),name:e.type,time:Date.now(),level:d.Low};a(e.reason)&&(t=me(me({},t),T(e.reason,d.Low))),j.push({type:R.UNHANDLEDERJECTION,category:j.getCategory(R.UNHANDLEDERJECTION),data:me({},t),level:d.Error}),ae.send(t)},handleDOMClick:function(e){var t=e.activeElement;if(n=t.tagName.toLowerCase(),!ue.filterDOMRegExp||!ue.filterDOMRegExp.test(n)){var n,r=function(e){var t=e.tagName.toLowerCase();if("body"===t)return null;var n=e.classList.value;n=""!==n?' class="'.concat(n,'"'):"";var r=e.id?' id="'.concat(e.id,'"'):"",o=e.innerText;return"<".concat(t).concat(r).concat(""!==n?n:"",">").concat(o,"</").concat(t,">")}(t);if(r&&(j.push({type:R.CLICK,category:j.getCategory(R.CLICK),data:r,level:d.Info}),ue.reportUIClick)){var o={type:R.CLICK,url:s(),name:t.innerText,time:Date.now(),level:d.Info,message:r};ae.send(o)}}}},ye=function(){return ye=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},ye.apply(this,arguments)};function ve(e){return ue.filterXhrUrlRegExp&&ue.filterXhrUrlRegExp.test(e)}function ge(e){(function(e){return!(!e||(t=e.type,c[t])||(function(e,t){c[e]||(c[e]=!0)}(e.type),se[e.type]=se[e.type]||[],se[e.type].push(e.callback),0));var t})(e)&&function(e){switch(e){case O.XHR:!function(){if("XMLHttpRequest"in u){var e=XMLHttpRequest.prototype;f(e,"open",(function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];this.mito_xhr={method:o.isString(t[0])?t[0]:t[0].toUpperCase(),url:t[1],sTime:Date.now(),type:N.XHR},e.apply(this,t)}})),f(e,"send",(function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=this.mito_xhr,o=r.method,a=r.url;ue.beforeAppAjaxSend&&ue.beforeAppAjaxSend({method:o,url:a},this),l(this,"readystatechange",(function(){if(!(o===K.Post&&ae.isSdkTransportUrl(a)||ve(a))){var e=this,n=e.responseType,r=e.response,i=e.status;if(4===e.readyState){this.mito_xhr.reqData=t[0];var u=Date.now();this.mito_xhr.time=this.mito_xhr.sTime,this.mito_xhr.status=i,-1!==["","json","text"].indexOf(n)&&(this.mito_xhr.responseText="object"==typeof r?JSON.stringify(r):r),this.mito_xhr.elapsedTime=u-this.mito_xhr.sTime,le(O.XHR,this.mito_xhr)}}})),e.apply(this,t)}}))}}();break;case O.FETCH:"fetch"in u&&f(u,O.FETCH,(function(e){return function(t,n){void 0===n&&(n={});var r=Date.now(),o=n&&n.method||"GET",a={type:N.FETCH,method:o,reqData:n&&n.body,url:t},i=new Headers(n.headers||{});return Object.assign(i,{setRequestHeader:i.set}),ue.beforeAppAjaxSend&&ue.beforeAppAjaxSend({method:o,url:t},i),n=ye(ye({},n),{headers:i}),e.apply(u,[t,n]).then((function(e){var n=e.clone(),i=Date.now();a=ye(ye({},a),{elapsedTime:i-r,status:n.status,time:r}),n.text().then((function(e){o===K.Post&&ae.isSdkTransportUrl(t)||ve(t)||(a.responseText=n.status>x.UNAUTHORIZED&&e,le(O.FETCH,a))}))}),(function(e){var n=Date.now();if(!(o===K.Post&&ae.isSdkTransportUrl(t)||ve(t)))throw a=ye(ye({},a),{elapsedTime:n-r,status:0,time:r}),le(O.FETCH,a),e}))}}));break;case O.ERROR:l(u,"error",(function(e){le(O.ERROR,e)}),!0);break;case O.CONSOLE:"console"in u&&["log","debug","info","warn","error","assert"].forEach((function(e){e in u.console&&f(u.console,e,(function(t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];t&&(le(O.CONSOLE,{args:n,level:e}),t.apply(u.console,n))}}))}));break;case O.HISTORY:!function(){if(t=(e=u.chrome)&&e.app&&e.app.runtime,n="history"in u&&!!u.history.pushState&&!!u.history.replaceState,!t&&n){var e,t,n,r=u.onpopstate;u.onpopstate=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=s(),o=de;le(O.HISTORY,{from:o,to:n}),r&&r.apply(this,e)},f(u.history,"pushState",o),f(u.history,"replaceState",o)}function o(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length>2?t[2]:void 0;if(r){var o=de,a=String(r);return de=a,le(O.HISTORY,{from:o,to:a}),e.apply(this,t)}}}}();break;case O.UNHANDLEDERJECTION:l(u,O.UNHANDLEDERJECTION,(function(e){le(O.UNHANDLEDERJECTION,e)}));break;case O.DOM:!function(){if("document"in u){var e,t,n,r=(e=le,t=ue.throttleDelayTime,n=!0,function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];n&&(e.apply(this,r),n=!1,setTimeout((function(){n=!0}),t))});l(u.document,"click",(function(){r(O.DOM,{category:"click",data:this},!0)}))}}()}}(e.type)}function Ee(e){void 0===e&&(e={}),function(e){void 0===e&&(e={}),"XMLHttpRequest"in u&&!e.disabled&&(ce(e),ge({callback:function(e){be.handleHttp(e,R.XHR)},type:O.XHR}),ge({callback:function(e){be.handleHttp(e,R.FETCH)},type:O.FETCH}),ge({callback:function(e){be.handleError(e)},type:O.ERROR}),ge({callback:function(e){be.handleHistory(e)},type:O.HISTORY}),ge({callback:function(e){be.handleUnhandleRejection(e)},type:O.UNHANDLEDERJECTION}),ge({callback:function(e){be.handleDOMClick(e.data)},type:O.DOM}),ge({callback:function(e){be.handleHashchange(e)},type:O.HASHCHANGE}))}(e)}de=s()})(),r})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,